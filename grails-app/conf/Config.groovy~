// locations to search for config files that get merged into the main config
// config files can either be Java properties files or ConfigSlurper scripts

// grails.config.locations = [ "classpath:${appName}-config.properties",
//                             "classpath:${appName}-config.groovy",
//                             "file:${userHome}/.grails/${appName}-config.properties",
//                             "file:${userHome}/.grails/${appName}-config.groovy"]

// if(System.properties["${appName}.config.location"]) {
//    grails.config.locations << "file:" + System.properties["${appName}.config.location"]
// }

grails.project.groupId = appName // change this to alter the default package name and Maven publishing destination
grails.mime.file.extensions = true // enables the parsing of file extensions from URLs into the request format
grails.mime.use.accept.header = false
grails.mime.types = [ html: ['text/html','application/xhtml+xml'],
                      xml: ['text/xml', 'application/xml'],
                      text: 'text-plain',
                      js: ['application/x-javascript','text/javascript'],
                      rss: 'application/rss+xml',
                      atom: 'application/atom+xml',
                      css: 'text/css',
                      csv: 'text/csv',
                      pdf: 'application/pdf',
                      rtf: 'application/rtf',
                      excel: 'application/vnd.ms-excel',
                      ods: 'application/vnd.oasis.opendocument.spreadsheet',
                      all: '*/*',
                      json: ['application/json','text/json'],
                      form: 'application/x-www-form-urlencoded',
                      multipartForm: 'multipart/form-data'
                    ]
// URL Mapping Cache Max Size, defaults to 5000
//grails.urlmapping.cache.maxsize = 1000



grails.cache.enabled = true;

grails.cache.config = {
    cache {
       name 'pages'
    }
    cache {
       name 'maps'
    }
 }

grails  {
	mail   {
	 host = "smtp.gmail.com"
	 port = 465
	 username = "bcfuchs@gmail.com"
	 password = "Fi!igree"
	 props = ["mail.smtp.auth":"true",
			  "mail.smtp.socketFactory.port":"465",
			  "mail.smtp.socketFactory.class":"javax.net.ssl.SSLSocketFactory",
			  "mail.smtp.socketFactory.fallback":"false"]
   }
}
//grails.plugins.springsecurity.rejectIfNoRule = true
grails.plugins.springsecurity.ui.encodePassword = false;

grails.plugins.springsecurity.useBasicAuth = true
grails.plugins.springsecurity.basic.realmName = "Uredb Dev site Grails authentication"
grails.plugins.springsecurity.securityConfigType = 'Annotation'
grails.plugins.springsecurity.userLookup.userDomainClassName = 'org.ac.uk.reading.ure.sec.User'
grails.plugins.springsecurity.userLookup.authorityJoinClassName = 'org.ac.uk.reading.ure.sec.UserRole'
grails.plugins.springsecurity.authority.className = 'org.ac.uk.reading.ure.sec.Role'
grails.plugins.springsecurity.requestMap.className = 'org.ac.uk.reading.ure.sec.Requestmap'


grails.plugins.springsecurity.roleHierarchy = '''
   ROLE_ADMIN > ROLE_CURATOR
   ROLE_CURATOR > ROLE_EDITOR
   ROLE_EDITOR > ROLE_SUBSCRIBER
   ROLE_SUBSCRIBER > ROLE_ANONYMOUS
'''
grails.plugins.springsecurity.controllerAnnotations.staticRules = [
    '/admin/**':['ROLE_CURATOR'],
	'/auth/**':['IS_AUTHENTICATED_ANONYMOUSLY'],
	'/**':['IS_AUTHENTICATED_ANONYMOUSLY']
	];
grails.app.context = "/"

// The default codec used to encode data with ${}
grails.views.default.codec = "none" // none, html, base64
grails.views.gsp.encoding = "UTF-8"
grails.converters.encoding = "UTF-8"
// enable Sitemesh preprocessing of GSP pages
grails.views.gsp.sitemesh.preprocess = true
// scaffolding templates configuration
grails.scaffolding.templates.domainSuffix = 'Instance'

// Set to false to use the new Grails 1.2 JSONBuilder in the render method
grails.json.legacy.builder = false
// enabled native2ascii conversion of i18n properties files
grails.enable.native2ascii = true
// whether to install the java.util.logging bridge for sl4j. Disable for AppEngine!
grails.logging.jul.usebridge = true
// packages to include in Spring bean scanning
grails.spring.bean.packages = []

// request parameters to mask when logging exceptions
grails.exceptionresolver.params.exclude = ['password']

grails.war.resources = { stagingDir ->
    delete { fileset dir: "${stagingDir}/.git/" }
}

// set per-environment serverURL stem for creating absolute links
environments {
    production {
//        grails.serverURL = "http://localhost:8080"
        // this affects ONLY link writing--NOT listening or routing    
 //       grails.serverURL = "http://ure.mobilecollective.co.uk"

        grails.resources.mappers.googleclosurecompiler.disable = true
    }
    development {
        grails.serverURL = "http://localhost:8080/${appName}"
    }
    test {
        grails.serverURL = "http://localhost:8082/${appName}"
    }
	test2 {
		//grails.serverURL = "http://localhost:8080"
    //    grails.serverURL = "http://ure.local"
		disable.auto.recompile=false
        grails.resources.mappers.googleclosurecompiler.disable = true
		grails.gsp.enable.reload=true
	}

}

// log4j configuration
log4j = {
    // Example of changing the log pattern for the default console
    // appender:
    //
    appenders {
        console name:'stdout', layout:pattern(conversionPattern: '%-5p [%t]: %m%n')
    }
	info   "grails.app"
	
    warn  'org.codehaus.groovy.grails.web.servlet',  //  controllers
           'org.codehaus.groovy.grails.web.pages', //  GSP
           'org.codehaus.groovy.grails.web.sitemesh', //  layouts
           'org.codehaus.groovy.grails.web.mapping.filter', // URL mapping
           'org.codehaus.groovy.grails.web.mapping', // URL mapping
           'org.codehaus.groovy.grails.commons', // core / classloading
           'org.codehaus.groovy.grails.plugins', // plugins
           'org.codehaus.groovy.grails.orm.hibernate', // hibernate integration
           'org.springframework',
           'org.hibernate',
           'net.sf.ehcache.hibernate'

    warn   'org.mortbay.log',
	'grails.app.services.grails.plugins.springsecurity.ui.SpringSecurityUiService'
	
	debug 'org.springframework.security'
	debug 'org.hibernate.SQL'
	}


// Added by the Spring Security Core plugin:

// Added by the Spring Security Core plugin:

//grails.config.defaults.locations = [KickstartResources]
// Uncomment and edit the following lines to start using Grails encoding & escaping improvements

/* remove this line 
// GSP settings
grails {
    views {
        gsp {
            encoding = 'UTF-8'
            htmlcodec = 'xml' // use xml escaping instead of HTML4 escaping
            codecs {
                expression = 'html' // escapes values inside null
                scriptlet = 'none' // escapes output from scriptlets in GSPs
                taglib = 'none' // escapes output from taglibs
                staticparts = 'none' // escapes output from static template parts
            }
        }
        // escapes all not-encoded output at final stage of outputting
        filteringCodecForContentType {
            //'text/html' = 'html'
        }
    }
}
remove this line */
